{"version":3,"sources":["Loader.js","Joke.js","Sidebar.js","DadJokes.js","App.js","serviceWorker.js","index.js"],"names":["Loader","className","React","Component","Joke","props","handleClick","bind","evt","target","this","updateScore","jokeId","emoji","s","score","onClick","joke","id","Sidebar","button","isDisabled","getNewJokes","DadJokes","state","jokes","JSON","parse","window","localStorage","getItem","isLoaded","length","setState","newJokes","oldJokes","Set","add","console","log","numJokesToGet","axios","get","headers","Accept","res","has","data","push","st","concat","setItem","stringify","key","change","updatedJoke","filter","updatedJokes","undefined","slice","sort","a","b","page","sortByScore","map","el","defaultProps","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f7424ce2.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Loader.css';\r\n\r\nclass Loader extends React.Component {\r\n    render(){\r\n        return(\r\n            <div className=\"loader\">\r\n                <i className=\"far fa-grin-squint spinning fa-4x\"></i>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Loader;","import React from 'react';\r\nimport './Joke.css';\r\n\r\nclass Joke extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick(evt){\r\n        // determine which button was clicked\r\n        let target = evt.target.className;\r\n\r\n        // call updateSCore based on whether upvote or downvote was clicked\r\n        if(target === 'upvote' || target === 'fas fa-thumbs-up fa-2x'){\r\n            this.props.updateScore(this.props.jokeId, 1);\r\n        } else if (target === 'downvote' || target === 'fas fa-thumbs-down fa-2x'){\r\n            this.props.updateScore(this.props.jokeId, -1);\r\n        }\r\n    }\r\n    \r\n    render(){\r\n        let emoji;\r\n        let s = this.props.score;\r\n        if(s < 2){\r\n            emoji = <i className=\"far fa-tired fa-2x\"></i>\r\n        } else if(s >= 2 && s < 4){\r\n            emoji = <i className=\"far fa-meh-rolling-eyes fa-2x\"></i>\r\n        } else if(s >= 4 && s < 6){\r\n            emoji = <i className=\"far fa-laugh fa-2x\"></i>\r\n        } else if(s >= 6 && s < 8){\r\n            emoji = <i className=\"far fa-laugh-squint fa-2x\"></i>\r\n        } else if(s >= 8){\r\n            emoji = <i className=\"far fa-grin-squint-tears fa-2x\"></i>\r\n        }\r\n            \r\n        return(\r\n            <li className=\"Joke\">\r\n                <span className=\"wrapper\">\r\n                    <span className=\"Joke-button_container\">\r\n                        <button className=\"upvote\" onClick={this.handleClick}><i className=\"fas fa-thumbs-up fa-2x\"></i></button>\r\n                        <p className=\"score\">{this.props.score ? this.props.score : 0}</p>\r\n                        <button className=\"downvote\" onClick={this.handleClick}><i className=\"fas fa-thumbs-down fa-2x\"></i></button>\r\n                    </span>\r\n                    <p className=\"Joke-content\">{this.props.joke}</p>\r\n                </span>\r\n                <span id=\"rating-icon\">\r\n                    {emoji}\r\n                </span>  \r\n            </li>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Joke;","import React from 'react';\r\nimport './Sidebar.css';\r\n\r\nclass Sidebar extends React.Component {\r\n    render(){\r\n        let button;\r\n\r\n        if(this.props.isDisabled){\r\n            button = <p>Loading...</p>\r\n        } else {\r\n            button = <button onClick={this.props.getNewJokes}>Get more jokes</button>\r\n        }\r\n\r\n        return(\r\n            <div className=\"Sidebar\">\r\n                <h1>Dad Jokes</h1>\r\n                <i className=\"far fa-grin-squint-tears fa-5x\"></i>\r\n                {button}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Sidebar;","import React from 'react';\r\nimport Loader from './Loader';\r\nimport Joke from './Joke';\r\nimport Sidebar from './Sidebar';\r\nimport axios from 'axios';\r\nimport './DadJokes.css';\r\n\r\nclass DadJokes extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            // JSON.parse jokes if any are present, otherwise parse an empty array\r\n            jokes: JSON.parse(window.localStorage.getItem(\"jokes\") || \"[]\"),\r\n            isLoaded: false\r\n        }\r\n\r\n        this.getNewJokes = this.getNewJokes.bind(this);\r\n        this.updateScore = this.updateScore.bind(this);\r\n        \r\n    }\r\n\r\n    static defaultProps = {\r\n        numJokesToGet: 10\r\n    }\r\n\r\n    componentDidMount(){\r\n        //fetch new jokes if none are saved in local storage, otherwise set the page to loaded\r\n        if(this.state.jokes.length === 0){\r\n            this.getNewJokes();\r\n        } else {\r\n            this.setState({ isLoaded: true });\r\n        }\r\n    }\r\n\r\n    async getNewJokes(){\r\n\r\n        // display loader while fetching new jokes\r\n        this.setState({ isLoaded: false })\r\n\r\n        // new jokes will be stored in newJokes.\r\n        let newJokes = [];\r\n\r\n        // create set of old jokes to compare for duplicates\r\n        let oldJokes = new Set();\r\n        for(let joke of this.state.jokes){\r\n            oldJokes.add(joke.id);\r\n        }\r\n        console.log(oldJokes);\r\n\r\n        // fetch a new joke, store it in res, then push it to newJokes until the required num of jokes have been fetched\r\n        let res;\r\n        while(newJokes.length < this.props.numJokesToGet){\r\n            res = await axios.get('https://icanhazdadjoke.com/', {\r\n                headers: {\r\n                    Accept: 'application/json'\r\n                }\r\n            });\r\n\r\n            console.log(!oldJokes.has(res.data.id));\r\n            //if newJoke is not already contained in oldJokes, push it into newJokes and also add it\r\n            // to old jokes so we don't get a duplicate during the loop\r\n            if(!oldJokes.has(res.data.id)){\r\n                newJokes.push(res.data);\r\n                oldJokes.add(res.data.id);\r\n            }\r\n        }\r\n\r\n\r\n        // add newJokes to jokes array in state, toggle loader off, and sync with localStorage\r\n        this.setState(st => ({\r\n            jokes: this.state.jokes.concat(newJokes), isLoaded: true\r\n        }),\r\n        () => {\r\n            window.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes));\r\n        });\r\n            \r\n\r\n        \r\n    }\r\n\r\n\r\n    updateScore(key, change){\r\n        // find the joke whose score is being updated\r\n        let updatedJoke = this.state.jokes.filter(joke => (joke.id === key));\r\n\r\n        // put other jokes into new array\r\n        let updatedJokes = this.state.jokes.filter(joke => (joke.id !== key));\r\n\r\n        // if score was previously undefined, set it to 0\r\n        if(updatedJoke[0].score === undefined){\r\n            updatedJoke[0].score = 0;\r\n        }\r\n\r\n        // add the change (1 or -1) to the score\r\n        updatedJoke[0].score += change;\r\n\r\n        // add updatedJoke to updatedJokes\r\n        updatedJokes.push({ id: updatedJoke[0].id, joke: updatedJoke[0].joke, score: updatedJoke[0].score });\r\n\r\n        // set state with new jokes array, then sync with localStorage\r\n        this.setState(st => (\r\n            { jokes: updatedJokes }\r\n        ),\r\n        () => {\r\n            window.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes));   \r\n        });\r\n        \r\n    }\r\n\r\n    sortByScore(){\r\n        let jokes = this.state.jokes.slice().sort(function(a, b){ \r\n            if(a.score === undefined){\r\n                a.score = 0;\r\n            }\r\n            if(b.score === undefined){\r\n                b.score = 0;\r\n            }\r\n            return b.score - a.score });\r\n        return jokes;\r\n    }\r\n\r\n    render(){\r\n        let page;\r\n        let jokes = this.sortByScore(); \r\n        if(this.state.isLoaded){\r\n            //display if jokes have loaded\r\n            page = \r\n                <div className=\"main-wrapper\">\r\n                    <div className=\"DadJokes\">\r\n                        <div className=\"DadJokes-sidebar\">\r\n                            <Sidebar getNewJokes={this.getNewJokes} isDisabled={false} />\r\n                        </div>\r\n                        <ul className=\"DadJokes-joke_list\">\r\n                            {jokes.map(el => (\r\n                                <Joke \r\n                                    joke={el.joke} \r\n                                    jokeId={el.id}\r\n                                    key={el.id} \r\n                                    score={el.score} \r\n                                    updateScore={this.updateScore}\r\n                                />))}\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n        } else {\r\n            //display while jokes are still being fetched\r\n            page =\r\n                <div className=\"main-wrapper\">\r\n                    <div className=\"DadJokes\">\r\n                        <div className=\"DadJokes-sidebar\">\r\n                            <Sidebar getNewJokes={this.getNewJokes} isDisabled={true} />\r\n                        </div>\r\n                        <ul className=\"DadJokes-joke_list\">\r\n                            <Loader />\r\n                        </ul>\r\n                    </div>\r\n                </div>  \r\n        } \r\n \r\n        return(\r\n            <div>\r\n                {page}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DadJokes;","import React from 'react';\nimport DadJokes from './DadJokes';\n\nfunction App() {\n  return (\n      <DadJokes />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}